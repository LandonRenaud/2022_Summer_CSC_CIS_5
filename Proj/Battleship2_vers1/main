 /* 
 * File:   main.cpp
 * Author: Landon Renaud
 * Created on July 25, 2022, 11:12 PM
 * Purpose: setup variables, board printing system, game setup process, clone reusible elements of project 1, create playable barebones version of the game
 */

//System Libraries
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
#include <cstdlib>
#include <iomanip>
using namespace std;

//User Libraries

//Global Constants
//Mathematical/Physics/Conversions, Higher dimensioned arrays
const unsigned short COLS = 11;

// ******************* //
// FUNCTION PROTOTYPES //
// ******************* //

// SETUP FUNCTIONS
void initboard(unsigned short [][COLS], const unsigned short);
void getPshipPos(unsigned short [][COLS], const unsigned short);
void getCPUpos(unsigned short [][COLS], const unsigned short);
// function to verify ship placements, error code 1: ship goes off the board, error code 2: ship overlaps another ship, error code 3: invalid direction
int isSPgood(const unsigned short [][COLS], const unsigned short, char, unsigned short, unsigned short, const unsigned short, int&, int&); 
void prntboard(short unsigned [][COLS], const unsigned short);



// Gameplay functions
void prntboard(short unsigned [][COLS], short unsigned [][COLS], const unsigned short);
void playerATK(unsigned short [][COLS], unsigned short&);
void CPUatk(unsigned short [][COLS], unsigned short&);
bool isgameovr(unsigned short, unsigned short, bool&, unsigned short [][COLS], unsigned short [][COLS], const unsigned short); //checks ships remaining, returns false if game is still going

// winrate file system
void getWR(unsigned, unsigned, bool);


// ********************** //
// EXCUTUTION BEGINS HERE //
// ********************** //

int main(int argc, char** argv) {
    //Initialize the Random Number Seed
    srand(static_cast<unsigned short>(time(0)));
    
    //Declare Variables lines 32-70
    const unsigned short ROWS = 11;
    unsigned short cpuatkn,     // a number to be randomly generated to determine where the CPU will attack 
                   roundno;     // a variable to track the number of rounds, which will be displayed at the end of the game
    unsigned int wincnt = 0,    // tracks the number of player wins for the purpose of win rate calculation
                 gamenum = 0;   // tracks the current game number for the purpose of win rate calculation
    char again;
    bool gamest = true; // game state variable, once game state is false the game will end, 
                        // and the player will be asked if they want to play again
    bool playerW;  // a variable for storing win rate, if the player wins, it equals 1, if the CPU wins, it equals 0
    
    // player board variables
    unsigned short pBoard[ROWS][COLS],
                   hitnumP = 0; // tracks the number of hits made by the player, if the number reaches 7, the player wins
    // CPU board variables
    unsigned short cBoard[ROWS][COLS],
                   hitnumC = 0; // tracks the number of hits made by the CPU, if the number reaches 7, the CPU wins
    // CPU ai variables, if true, the cpu will never attack that space for the rest of the game
    bool isHit[ROWS][COLS];
    /* 
     * VALUE KEY FOR PLAYER AND COMPUTER BOARD VARIABLES
     * EX: a1
     * a1 = 0, + clear space
     * a1 = 1, O missed shot
     * a1 = 2, # Aircraft Carrier ship tile
     * a1 = 3, # Battleship ship tile
     * a1 = 4, # Cruiser ship tile
     * a1 = 5, # Destroyer ship tile
     * a1 = 6, X hit
     */
    
    // LOOP STARTS HERE: when this loop ends, the program is terminated
    do{
        hitnumP = 0;
        hitnumC = 0;
        cout << "\t -=-= BATTLESHIP GAME =-=-\n"
         << "Play versus a computer and see if you can sink its ships\nbefore it sinks yours\n\n";
        // initiallize all board tile values to 0
        initboard(pBoard, ROWS); // for player board
        initboard(cBoard, ROWS); // for CPU board
        
        // setup functions
        getPshipPos(pBoard, ROWS);
        getCPUpos(cBoard, ROWS);
        
        cout << "\nAll ship placements set! \n\n\t      -=-= GAME  START =-=-";
        
        // GAMEPLAY CYCLE IN THIS LOOP
        do {
            prntboard(pBoard, cBoard, ROWS);
            playerATK(cBoard, hitnumP);
            CPUatk(pBoard, hitnumC);
            
        } while(!isgameovr(hitnumP, hitnumC, playerW));
        
    
        getWR(wincnt, gamenum, playerW);
        
        // System to determine if the player will play again
        cout << "\nWould you like to play BATTLESHIP again? (Y/N)\n";
        cin >> again;
    } while(again == 'Y' || again == 'y');
    

    //Exit stage right
    return 0;
}

// *********************** //
//                         //
//  FUNCTION DECLARATIONS  //
//                         //
// *********************** //

void initboard(unsigned short board[][COLS], const unsigned short ROWS) {
    for(int n = 0; n < ROWS; n++) {
        for(int a = 0; a < COLS; a++) {
            board[n][a] = 0;
        }
    }
}


int isSPgood(const unsigned short board[][COLS], const unsigned short ROWS, char xcoord, unsigned short ycoord, unsigned short direc, const unsigned short LENGTH, int& x, int& y) {
    unsigned short ecode;
    // converts tile to a valid input for the 2d array
    if(xcoord < 97 || xcoord > 107 || ycoord > 11 || ycoord < 1) {
        ecode = 4; // invalid coord error
        return ecode;
    } else {
        x = static_cast<int>(xcoord)-97; // subtract one extra for correction (since arrays go from 0 to SIZE-1)
        y = ycoord-1; // subtract one to convert user input to correct array index (since arrays go from 0 to SIZE-1)A
    }
    
    //cout << "x: " << x << endl << "y: " << y << endl;
    if(direc == 1) {
        for(int n = 0; n < LENGTH; n++) {
            //cout << y-(n-1)<< endl;
            if(board[y-n][x] == 0) ecode = 0; // no error
            if((y-n) < 0) ecode = 1; // off board error
            if(board[y-n][x] == 2 || 
               board[y-n][x] == 3 || 
               board[y-n][x] == 4 || 
               board[y-n][x] == 5) ecode = 2;   // ship overlap error
        }
    } else if(direc == 2) {
        for(int n = 1; n <= LENGTH; n++) {
            if(board[y][x+n] == 0) ecode = 0; // no error
            if((x+n) > COLS) ecode = 1; // off board error
            if(board[y][x] == 2 || 
               board[y][x] == 3 || 
               board[y][x] == 4 || 
               board[y][x] == 5) ecode = 2;   // ship overlap error
        }
    } else if(direc == 3) {
        for(int n = 1; n <= LENGTH; n++) {
            if(board[y+n][x] == 0) ecode = 0; // no error
            if((y+n) > ROWS) ecode = 1; // off board error
            if(board[y+n][x] == 2 || 
               board[y+n][x] == 3 || 
               board[y+n][x] == 4 || 
               board[y+n][x] == 5) ecode = 2;   // ship overlap error
        }
    } else if(direc == 4) {
        for(int n = 0; n < LENGTH; n++) {
            if(board[y][x-n] == 0) ecode = 0; // no error
            if((x-n) < 0) ecode = 1; // off board error
            if(board[y][x-n] == 2 || 
               board[y][x-n] == 3 || 
               board[y][x-n] == 4 || 
               board[y][x-n] == 5) ecode = 2;   // ship overlap error
        }
    } else ecode = 3; // invalid direction error
    return ecode;
}







/* 
 * VALUE KEY FOR PLAYER AND COMPUTER BOARD VARIABLES
 * EX: a1
 * a1 = 0, + clear space
 * a1 = 1, O missed shot
 * a1 = 2, # Aircraft Carrier ship tile
 * a1 = 3, # Battleship ship tile
 * a1 = 4, # Cruiser ship tile
 * a1 = 5, # Destroyer ship tile
 * a1 = 6, X hit
 */

void getPshipPos(unsigned short pBoard[][COLS], const unsigned short ROWS) {
    // Variables:
    char xcoord;
    unsigned short direc;
    char schoice;
    unsigned short dCnt = 3,    // destroyer count
                   bCnt = 1,    // battleship count
                   cCnt = 3,    // cruiser count
                   aCnt = 2,    // aircraft carrier count
                   ycoord,
                   ecode;       // error code variable, equals 0 of no error
    int x, y;
    const unsigned short DLENGTH = 2, // destroyer length
                         BLENGTH = 5, // battleship length
                         CLENGTH = 3, // cruiser length
                         ALENGTH = 4; // aircraft carrier length
    unsigned short length; // a variable to be passed to the ship position checking function, describes the length of a ship for validation purposes
    
    cout << "Place your ships on the board: ";
    cout << "What tile will you put your ship on?\nInput tile, then ship, then direction:" 
         << "\nKey: B for Battleship | D for Destroyer \n     Direction:\n     1: Up | 2: Right | 3: Down | 4: Left"
         << "\n     Example input: B a1 3\n";
    
    while(dCnt > 0 || bCnt > 0 || cCnt > 0 || aCnt > 0) {
        
        cout << "\n\nAir Craft Carriers (4 Long): " << aCnt << endl
             << "Battleships (5 Long):        " << bCnt << endl
             << "Cruisers (3 Long):           " << cCnt << endl
             << "Destroyers (2 Long):         " << dCnt << endl << endl;
        prntboard(pBoard, ROWS);
        // SHIP PLACEMENT BEGINS HERE:
        cout << "\nPlace ship: \n";
        
        cin >> schoice >> xcoord >> ycoord >> direc;
        //cout << xcoord << " " << ycoord;
        /*
         * Pseudo code:
         * if: ship goes off board, output "error";
         * else if: ship already exists where new ship will be, output "error";
         * else: place ship in spot;
         */
        switch(schoice) {
            case 'd':
            case 'D': {
                if(dCnt == 0) cout << "Error, you have no destroyers left to place.";
                else {
                    length = DLENGTH;
                    ecode = isSPgood(pBoard, ROWS, xcoord, ycoord, direc, length, x, y);
                    xcoord = x;
                    ycoord = y;
                    //cout << "awerfaefref " << ecode << "  awefawefawefr";
                    if(ecode == 1) {
                        cout << "Error: ship goes off the board";
                    } else if(ecode == 2) {
                        cout << "Error: ship overlaps a preexisting ship";
                    } else if(ecode == 3) {
                        cout << "Error: invalid direction";
                    } else if(ecode == 4) {
                        cout << "Error, please input a valid coordinate";
                    } else { // if there is an error, gives respective error message, else sets the ship in the coords provided
                        if(direc == 1) {
                            for(int n = 0; n < length; n++) {
                                pBoard[ycoord-n][xcoord] = 5; 
                            }
                        } else if(direc == 2) {
                            for(int n = 0; n < length; n++) {
                                pBoard[ycoord][xcoord+n] = 5; 
                            }
                        } else if(direc == 3) {
                            for(int n = 0; n < length; n++) {
                                pBoard[ycoord+n][xcoord] = 5; 
                            }
                        } else if(direc == 4) {
                            for(int n = 0; n < length; n++) {
                                pBoard[ycoord][xcoord-n] = 5; 
                            }
                        }
                        dCnt--;
                    }
                    
                }
                break;
            }
            case 'b':
            case 'B': {
                if(bCnt == 0) cout << "Error, you have no battleships left to place.";
                else {
                    length = BLENGTH;
                    ecode = isSPgood(pBoard, ROWS, xcoord, ycoord, direc, length, x, y);
                    xcoord = x;
                    ycoord = y;
                    //cout << "awerfaefref " << ecode << "  awefawefawefr";
                    if(ecode == 1) {
                        cout << "Error: ship goes off the board";
                    } else if(ecode == 2) {
                        cout << "Error: ship overlaps a preexisting ship";
                    } else if(ecode == 3) {
                        cout << "Error: invalid direction";
                    } else if(ecode == 4) {
                        cout << "Error, please input a valid coordinate";
                    } else { // if there is an error, gives respective error message, else sets the ship in the coords provided
                        if(direc == 1) {
                            for(int n = 0; n < length; n++) {
                                pBoard[ycoord-n][xcoord] = 3; 
                            }
                        } else if(direc == 2) {
                            for(int n = 0; n < length; n++) {
                                pBoard[ycoord][xcoord+n] = 3; 
                            }
                        } else if(direc == 3) {
                            for(int n = 0; n < length; n++) {
                                pBoard[ycoord+n][xcoord] = 3; 
                            }
                        } else if(direc == 4) {
                            for(int n = 0; n < length; n++) {
                                pBoard[ycoord][xcoord-n] = 3; 
                            }
                        }
                        bCnt--;
                    }
                }
                break;
            }
            case 'c':
            case 'C': {
                if(cCnt == 0) cout << "Error, you have no cruisers left to place.";
                else {
                    length = CLENGTH;
                    ecode = isSPgood(pBoard, ROWS, xcoord, ycoord, direc, length, x ,y);
                    xcoord = x;
                    ycoord = y;
                    
                    if(ecode == 1) {
                        cout << "Error: ship goes off the board";
                    } else if(ecode == 2) {
                        cout << "Error: ship overlaps a preexisting ship";
                    } else if(ecode == 3) {
                        cout << "Error: invalid direction";
                    } else if(ecode == 4) {
                        cout << "Error, please input a valid coordinate";
                    } else { // if there is an error, gives respective error message, else sets the ship in the coords provided
                        if(direc == 1) {
                            for(int n = 0; n < length; n++) {
                                pBoard[ycoord-n][xcoord] = 4; 
                            }
                        } else if(direc == 2) {
                            for(int n = 0; n < length; n++) {
                                pBoard[ycoord][xcoord+n] = 4; 
                            }
                        } else if(direc == 3) {
                            for(int n = 0; n < length; n++) {
                                pBoard[ycoord+n][xcoord] = 4; 
                            }
                        } else if(direc == 4) {
                            for(int n = 0; n < length; n++) {
                                pBoard[ycoord][xcoord-n] = 4; 
                            }
                        }
                        cCnt--;
                    }
                }
                break;
            }
            case 'a':
            case 'A': {
                if(aCnt == 0) cout << "Error, you have no aircraft carriers left to place.";
                else {
                    length = ALENGTH;
                    ecode = isSPgood(pBoard, ROWS, xcoord, ycoord, direc, length, x, y);
                    xcoord = x;
                    ycoord = y;
                    
                    if(ecode == 1) {
                        cout << "Error: ship goes off the board";
                    } else if(ecode == 2) {
                        cout << "Error: ship overlaps a preexisting ship";
                    } else if(ecode == 3) {
                        cout << "Error: invalid direction";
                    } else if(ecode == 4) {
                        cout << "Error, please input a valid coordinate";
                    } else { // if there is an error, gives respective error message, else sets the ship in the coords provided
                        if(direc == 1) {
                            for(int n = 0; n < length; n++) {
                                pBoard[ycoord-n][xcoord] = 2; 
                            }
                        } else if(direc == 2) {
                            for(int n = 0; n < length; n++) {
                                pBoard[ycoord][xcoord+n] = 2; 
                            }
                        } else if(direc == 3) {
                            for(int n = 0; n < length; n++) {
                                pBoard[ycoord+n][xcoord] = 2; 
                            }
                        } else if(direc == 4) {
                            for(int n = 0; n < length; n++) {
                                pBoard[ycoord][xcoord-n] = 2; 
                            }
                        }
                        aCnt--;
                    }
                }
                break;
            }
            default: cout << "please input a valid ship.";
        }
    }
}


void getCPUpos(unsigned short cBoard[][COLS], const unsigned short ROWS) {
    // Variables:
    char xcoord;
    unsigned short direc;
    unsigned short schoice;
    unsigned short dCnt = 4,    // destroyer count
                   bCnt = 2,    // battleship count
                   cCnt = 3,    // cruiser count
                   aCnt = 2,    // aircraft carrier count
                   ycoord,
                   ecode;       // error code variable, equals 0 of no error
    int x, y;
    const unsigned short DLENGTH = 2, // destroyer length
                         BLENGTH = 5, // battleship length
                         CLENGTH = 3, // cruiser length
                         ALENGTH = 4; // aircraft carrier length
    unsigned short length; // a variable to be passed to the ship position checking function, describes the length of a ship for validation purposes
    
    while(dCnt > 0 || bCnt > 0 || cCnt > 0 || aCnt > 0) {
        //cout << "working\n";
        schoice = (rand()%4)+2;
        direc = (rand()%4)+1;
        xcoord = static_cast<char>((rand()%11)+97);
        ycoord = (rand()%11)+1;
        
        switch(schoice) {
            case 5: { // destroyer
                if(dCnt != 0) {
                    length = DLENGTH;
                    ecode = isSPgood(cBoard, ROWS, xcoord, ycoord, direc, length, x, y);
                    //cout << ecode << endl;
                    xcoord = x;
                    ycoord = y;
                    //cout << "awerfaefref " << ecode << "  awefawefawefr";
                    if(ecode == 0) { // if there is an error, don't output a message, but restart the loop, until a valid position is found
                        if(direc == 1) {
                            for(int n = 0; n < length; n++) {
                                cBoard[ycoord-n][xcoord] = 5; 
                            }
                        } else if(direc == 2) {
                            for(int n = 0; n < length; n++) {
                                cBoard[ycoord][xcoord+n] = 5; 
                            }
                        } else if(direc == 3) {
                            for(int n = 0; n < length; n++) {
                                cBoard[ycoord+n][xcoord] = 5; 
                            }
                        } else if(direc == 4) {
                            for(int n = 0; n < length; n++) {
                                cBoard[ycoord][xcoord-n] = 5; 
                            }
                        }
                        dCnt--;
                    }
                    
                }
                break;
            }
            case 3: { // battleship
                if(bCnt != 0) {
                    length = BLENGTH;
                    ecode = isSPgood(cBoard, ROWS, xcoord, ycoord, direc, length, x, y);
                    //cout << ecode << endl;
                    xcoord = x;
                    ycoord = y;
                    //cout << "awerfaefref " << ecode << "  awefawefawefr";
                    if(ecode == 0) { // if there is an error, don't output a message, but restart the loop, until a valid position is found
                        if(direc == 1) {
                            for(int n = 0; n < length; n++) {
                                cBoard[ycoord-n][xcoord] = 3; 
                            }
                        } else if(direc == 2) {
                            for(int n = 0; n < length; n++) {
                                cBoard[ycoord][xcoord+n] = 3; 
                            }
                        } else if(direc == 3) {
                            for(int n = 0; n < length; n++) {
                                cBoard[ycoord+n][xcoord] = 3; 
                            }
                        } else if(direc == 4) {
                            for(int n = 0; n < length; n++) {
                                cBoard[ycoord][xcoord-n] = 3; 
                            }
                        }
                        bCnt--;
                    }
                }
                break;
            }
            case 4: { // cruiser
                if(cCnt != 0) {
                    length = CLENGTH;
                    ecode = isSPgood(cBoard, ROWS, xcoord, ycoord, direc, length, x ,y);
                    //cout << ecode << endl;
                    xcoord = x;
                    ycoord = y;
                    
                    if(ecode == 0) { // if there is an error, don't output a message, but restart the loop, until a valid position is found
                        if(direc == 1) {
                            for(int n = 0; n < length; n++) {
                                cBoard[ycoord-n][xcoord] = 4; 
                            }
                        } else if(direc == 2) {
                            for(int n = 0; n < length; n++) {
                                cBoard[ycoord][xcoord+n] = 4; 
                            }
                        } else if(direc == 3) {
                            for(int n = 0; n < length; n++) {
                                cBoard[ycoord+n][xcoord] = 4; 
                            }
                        } else if(direc == 4) {
                            for(int n = 0; n < length; n++) {
                                cBoard[ycoord][xcoord-n] = 4; 
                            }
                        }
                        cCnt--;
                    }
                }
                break;
            }
            case 2: { // aircraft carrier
                if(aCnt != 0) {
                    length = ALENGTH;
                    ecode = isSPgood(cBoard, ROWS, xcoord, ycoord, direc, length, x, y);
                    // << ecode << endl;
                    xcoord = x;
                    ycoord = y;
                    
                    if(ecode == 0) { // if there is an error, don't output a message, but restart the loop, until a valid position is found
                        if(direc == 1) {
                            for(int n = 0; n < length; n++) {
                                cBoard[ycoord-n][xcoord] = 2; 
                            }
                        } else if(direc == 2) {
                            for(int n = 0; n < length; n++) {
                                cBoard[ycoord][xcoord+n] = 2; 
                            }
                        } else if(direc == 3) {
                            for(int n = 0; n < length; n++) {
                                cBoard[ycoord+n][xcoord] = 2; 
                            }
                        } else if(direc == 4) {
                            for(int n = 0; n < length; n++) {
                                cBoard[ycoord][xcoord-n] = 2; 
                            }
                        }
                        aCnt--;
                    }
                }
                break;
            }
        }
    }
}


// only prints the player's board
void prntboard(unsigned short pBoard[][COLS], const unsigned short ROWS) {
    char tile; // to be used with ascii values to print certain characters to make the board less confusing compared to
               // the board from the versions of battleship in project 1
    
    cout << "      A B C D E F G H I J K\n     - - - - - - - - - - - -\n";
    for(int n = 0; n < ROWS; n++) {
        cout << setw(3) << n+1 << " |";
        for(int a = 0; a < COLS; a++) {
            if(pBoard[n][a] == 1) {
                tile = 'O';
            } else if(pBoard[n][a] == 2 || pBoard[n][a] == 3 || pBoard[n][a] == 4 || pBoard[n][a] == 5) {
                tile = '#';
            } else if(pBoard[n][a] == 6) {
                tile = 'X';
            } else tile = '+';
            cout << " " << tile;
        }
        cout << " |\n";
    }
    cout << "     - - - - - - - - - - - -\n";
}







// prints both game boards
void prntboard(unsigned short pBoard[][COLS], unsigned short cBoard[][COLS], const unsigned short ROWS) {
    char ptile,
         ctile;   
    
    cout << "\n\n      A B C D E F G H I J K\t\t\t      A B C D E F G H I J K\n"
         << "     - - - - - - - - - - - -\t\t\t     - - - - - - - - - - - -\n";
    for(int n = 0; n < ROWS; n++) {
        cout << setw(3) << n+1 << " |";
        for(int a = 0; a < COLS; a++) {
            if(pBoard[n][a] == 1) {
                ptile = 'O';
            } else if(pBoard[n][a] == 2 || pBoard[n][a] == 3 || pBoard[n][a] == 4 || pBoard[n][a] == 5) {
                ptile = '#';
            } else if(pBoard[n][a] == 6) {
                ptile = 'X';
            } else ptile = '+';
            cout << " " << ptile;
        }
        cout << " |\t\t\t";
        cout << setw(3) << n+1 << " |";
        for(int a = 0; a < COLS; a++) {
            if(cBoard[n][a] == 1) {
                ctile = 'O';
            } else if(cBoard[n][a] == 2 || cBoard[n][a] == 3 || cBoard[n][a] == 4 || cBoard[n][a] == 5) {
                ctile = '+';
            } else if(cBoard[n][a] == 6) {
                ctile = 'X';
            } else ctile = '+';
            cout << " " << ctile;
        }
        cout << " |\n";
    }
    cout << "     - - - - - - - - - - - -\t\t\t     - - - - - - - - - - - -\n";
}


void playerATK(unsigned short cBoard[][COLS], unsigned short& hitnumP) {
    char xcoord;
    unsigned short ycoord;
    int x, y;
    cout << "Input Coordinates for an Attack (Ex: a1): ";
    cin >> xcoord >> ycoord;
    
    x = static_cast<int>(xcoord)-97; // subtract one extra for correction (since arrays go from 0 to SIZE-1)
    y = ycoord-1; // subtract one to convert user input to correct array index (since arrays go from 0 to SIZE-1)
    
    if(x < 0 || x > 11 || y < 0 || y > 11) {
        cout << "Error: Please input a Valid Attack Coordinate";
    } else {
        if(cBoard[y][x] == 0) {
            cBoard[y][x] = 1;
            cout << "Miss!";
        } else if(cBoard[y][x] == 2 || cBoard[y][x] == 3 ||
                cBoard[y][x] == 4 || cBoard[y][x] == 5) {
            cBoard[y][x] = 6;
            hitnumP++;
            cout << "Hit!";
        }
    }
}


void CPUatk(unsigned short pBoard[][COLS], unsigned short& hitnumC) {
    unsigned short x = (rand()%11),
                   y = (rand()%11);
    cout << "\n\nThe CPU attacked " << static_cast<char>(x+97) << y+1 <<"!\n";
    
    if(pBoard[y][x] == 0) {
        pBoard[y][x] = 1;
        cout << "Miss!";
    } else if(pBoard[y][x] == 2 || pBoard[y][x] == 3 ||
            pBoard[y][x] == 4 || pBoard[y][x] == 5) {
        pBoard[y][x] = 6;
        cout << "Hit!";
        hitnumC++;
    }
}



bool isgameovr(unsigned short hitnumP, unsigned short hitnumC, bool& playerW, unsigned short pBoard[][COLS], unsigned short cBoard[][COLS], const unsigned short ROWS) {
    prntboard(pBoard, cBoard, ROWS);
    
    if(hitnumP == 28 && hitnumC != 28) {
        cout << "\n\nGAME OVER\nCongratulations, You Win! You Have Sunken All of the Enemy's Ships\n";
        playerW = true;
        return true;
    } else if(hitnumC == 28 && hitnumP != 28) {
        cout << "\n\nGAME OVER\nYou Lose! All Your Ships Have Been Sunken";
        return true;
    } else if(hitnumC == 28 && hitnumP == 28) {
        cout << "\n\nGAME OVER\nBoth Sides Have Destroyed Each Other! It's A Tie!\n";
        return true;
    } else return false;
}












void getWR(unsigned wincnt, unsigned gamenum, bool playerW) {
    // VARIABLES:
    char clearwr;  // a variable to hold y/n, used to determine whether the player wishes to clear the win record
    float winrate; // a value to be calculated at the end, where the program will tell the user their win rate across
                   // all the games they've played
    
    /*
     * Pseudo Code:
     * create output file stream
     * create input file stream
     * 
     * if: the file has no data, write "0 0", close file
     * 
     * open file for output: store file contents into variables:
     * variable 1 = number of games won
     * variable 2 = total games played
     * 
     * if: the player has won the current game, add 1 to variable 1
     * add 1 to variable 2 regardless od whether the player won
     * 
     * open file for storage
     * store contents of variable 1
     * input a space " "
     * store contents of variable 2
     * 
     * 
     * Ask the player if they want to delete the win record
     * if: the player inputs y or Y
     * open the file for storage
     * rewrite contents to ""
     * output: the win record was deleted
     * else:
     * output: the win record was not deleted
     * 
     */
    // WIN RATE CALCULATION HERE
    // opens input and output objects
    ofstream winsIN;
    ifstream winsOUT("Winrecord.txt");

    // if program does not detect data in the file (ie: if the file has just been created)
    if(!(winsOUT >> wincnt >> gamenum)) {
        winsOUT.close(); // closes input stream
        winsIN.open("Winrecord.txt"); // opens file in output stream
        winsIN << wincnt << " " << gamenum; // outputs the game number and win count into the file (both will be 0 at this time)
        winsIN.close();
    }

    // reads from file
    winsOUT.open("Winrecord.txt"); // stores the current game number and win count into the wincnt and gamenum variables
    winsOUT >> wincnt >> gamenum;
    winsOUT.close();
    //cout << wincnt << " " << gamenum << endl;

    if(playerW) wincnt++; // if the player won, increases win count

    gamenum++; // increases game count regardless of if the player won or not

    //cout << wincnt << " " << gamenum;
    winrate = (static_cast<float>(wincnt)/gamenum)*100; // uses static cast to force floating point division
    cout << fixed << setprecision(2) << "\nYour Win Rate is " << winrate << "%\n";

    // writes new values back to file
    winsIN.open("Winrecord.txt");
    winsIN << wincnt << " " << gamenum; // separated by space so that the program knows to distinguish the 
    winsIN.close();                     // two numbers as different variables

    // System to wipe the win record, if the player choses so, the win record will be reset
    cout << "would you like to clear the win record? (Y/N)\n";
    cin >> clearwr;
    if(clearwr == 'Y' || clearwr == 'y') {
        winsIN.open("Winrecord.txt");
        winsIN << ""; // rewrites the file as nothing ("")
        winsIN.close();
        cout << "The Win Record Has Been Cleared\n";
    } else cout << "The Win Record Was Not Cleared\n";
}
